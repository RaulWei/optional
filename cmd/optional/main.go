// Optional is a tool that generates 'optional' type wrappers around a given type T.
//
// Typically this process would be run using go generate, like this:
//
//	//go:generate optional -type=Foo
//
// running this command
//
//	optional -type=Foo
//
// in the same directory will create the file optional_foo.go
// containing a definition of
//
//	type OptionalFoo struct {
//		...
//	}
//
// The default type is OptionalT or optionalT (depending on if the type is exported)
// and output file is optional_t.go. This can be overridden with the -output flag.
//
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/build"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"
	"time"
)

var (
	funcMap = template.FuncMap{
		"first": func(s string) string {
			return strings.ToLower(string(s[0]))
		},
	}
)

const tmpl = `// Code generated by go generate
// This file was generated by robots at {{ .Timestamp }}

package {{ .PackageName }}

import "errors"

// {{ .OutputName }} is an optional {{ .TypeName }}
type {{ .OutputName }} struct {
	value *{{ .TypeName }}
}

// New{{ .OutputName }} creates a optional.{{ .OutputName }} from a {{ .TypeName }}
func New{{ .OutputName }}(v {{ .TypeName }}) {{ .OutputName }} {
	return {{ .OutputName }}{&v}
}

// Set sets the {{ .TypeName }} value
func ({{ .OutputName | first }} {{ .OutputName }}) Set(v {{ .TypeName }}) {
	{{ .OutputName | first }}.value = &v
}

// Get returns the {{ .TypeName }} value or an error if not present
func ({{ .OutputName | first }} {{ .OutputName }}) Get() ({{ .TypeName }}, error) {
	if !{{ .OutputName | first }}.Present() {
		return *{{ .OutputName | first }}.value, errors.New("value not present")
	}
	return *{{ .OutputName | first }}.value, nil
}

// Present returns whether or not the value is present
func ({{ .OutputName | first }} {{ .OutputName }}) Present() bool {
	return {{ .OutputName | first }}.value != nil
}

// OrElse returns the {{ .TypeName }} value or a default value if the value is not present
func ({{ .OutputName | first }} {{ .OutputName }}) OrElse(v {{ .TypeName }}) {{ .TypeName }} {
	if {{ .OutputName | first }}.Present() {
		return *{{ .OutputName | first }}.value
	}
	return v
}

// If calls the function f with the value if the value is present
func ({{ .OutputName | first }} {{ .OutputName }}) If(fn func({{ .TypeName }})) {
	if {{ .OutputName | first }}.Present() {
		fn(*{{ .OutputName | first }}.value)
	}
}
`

type generator struct {
	packageName string
	outputName  string
	typeName    string
}

func (g *generator) generate() ([]byte, error) {
	t := template.Must(template.New("").Funcs(funcMap).Parse(tmpl))

	data := struct {
		Timestamp   time.Time
		PackageName string
		TypeName    string
		OutputName  string
	}{
		time.Now().UTC(),
		g.packageName,
		g.typeName,
		g.outputName,
	}

	var buf bytes.Buffer

	err := t.Execute(&buf, data)
	if err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("optional: ")

	typeName := flag.String("type", "", "type name; must be set")
	outputName := flag.String("output", "", "output type and file name; default [o|O]ptional<type> and srcdir/optional_<type>.go")

	flag.Parse()

	if len(*typeName) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	pkg, err := build.Default.ImportDir(".", 0)
	if err != nil {
		log.Fatal(err)
	}

	var (
		filename string
		g        generator
	)

	g.typeName = *typeName
	g.packageName = pkg.Name

	if len(*outputName) == 0 {
		// no output specified, use default optional_<type>

		// TODO: may not be the most reliable method
		exported := strings.Title(g.typeName) == g.typeName

		if exported {
			g.outputName = "Optional" + strings.Title(g.typeName)
		} else {
			g.outputName = "optional" + strings.Title(g.typeName)
		}
		filename = fmt.Sprintf("optional_%s.go", strings.ToLower(g.typeName))
	} else {
		g.outputName = *outputName
		filename = strings.ToLower(g.outputName + ".go")
	}

	src, err := g.generate()
	if err != nil {
		log.Fatal(err)
	}

	err = ioutil.WriteFile(filename, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}
