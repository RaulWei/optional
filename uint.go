// Code generated by go generate
// This file was generated by robots at 2017-10-01 20:44:16.383679249 +0000 UTC

package optional

import "errors"

// Uint is an optional uint
type Uint struct {
	value *uint
}

// NewUint creates a optional.Uint from a uint
func NewUint(v uint) Uint {
	return Uint{&v}
}

// Set sets the uint value
func (u Uint) Set(v uint) {
	u.value = &v
}

// Get returns the uint value or an error if not present
func (u Uint) Get() (uint, error) {
	if !u.Present() {
		return *u.value, errors.New("value not present")
	}
	return *u.value, nil
}

// Present returns whether or not the value is present
func (u Uint) Present() bool {
	return u.value != nil
}

// OrElse returns the uint value or a default value if the value is not present
func (u Uint) OrElse(v uint) uint {
	if u.Present() {
		return *u.value
	}
	return v
}

// If calls the function f with the value if the value is present
func (u Uint) If(fn func(uint)) {
	if u.Present() {
		fn(*u.value)
	}
}
